import { createHash } from 'crypto';

export const uuidToMac = (uuid: string) => {
  const cleanUuid = uuid.replace(/-/g, '');

  let hash = 0;
  for (let i = 0; i < cleanUuid.length; i++) {
    const char = cleanUuid.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }

  // Преобразование хеша в строку в шестнадцатеричном формате
  const hexHash = Math.abs(hash).toString(16).padStart(12, '0');

  return hexHash.match(/.{1,2}/g)?.join(':').toUpperCase() ?? '';
};

export const textToPin = (text: string) => {
  const hash = createHash('sha1').update(text, 'utf-8').digest('hex');
  const hashAsNumber = BigInt('0x' + hash) % 100000000n;
  return hashAsNumber.toString().padStart(8, '0').replace(/(\d{3})(\d{2})(\d{3})/, '$1-$2-$3');
};

export const sleep = (time = 1000) => {
  return new Promise(resolve => setTimeout(resolve, time));
};

export const scaleRange = (value: number, fromScale: Range, toScale: Range) => {
  const fromRange = fromScale.max - fromScale.min;
  const toRange = toScale.max - toScale.min;

  const scaledValue = (value - fromScale.min) / fromRange;

  // Обработка обратной зависимости для целевой шкалы
  if (toScale.min > toScale.max) {
    return toScale.max + (1 - scaledValue) * Math.abs(toRange);
  }

  return toScale.min + scaledValue * Math.abs(toRange);
};

export const hsToRGB = (h: number, s: number): number => {
  const v = 1;

  const c = v * (s / 100);
  const x = c * (1 - Math.abs((h / 60) % 2 - 1));
  const m = v - c;
  let r = 0, g = 0, b = 0;

  if (0 <= h && h < 60) {
    r = c; g = x; b = 0;
  } else if (60 <= h && h < 120) {
    r = x; g = c; b = 0;
  } else if (120 <= h && h < 180) {
    r = 0; g = c; b = x;
  } else if (180 <= h && h < 240) {
    r = 0; g = x; b = c;
  } else if (240 <= h && h < 300) {
    r = x; g = 0; b = c;
  } else if (300 <= h && h < 360) {
    r = c; g = 0; b = x;
  }

  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);

  return (r << 16) + (g << 8) + b;
};

export const rgbToHS = (rgb: number): { hue: number, saturation: number } => {
  const r = (rgb >> 16) & 0xFF;
  const g = (rgb >> 8) & 0xFF;
  const b = rgb & 0xFF;

  const rNorm = r / 255;
  const gNorm = g / 255;
  const bNorm = b / 255;

  const max = Math.max(rNorm, gNorm, bNorm);
  const min = Math.min(rNorm, gNorm, bNorm);
  const delta = max - min;

  let h = 0;
  if (delta === 0) {
    h = 0;
  } else if (max === rNorm) {
    h = 60 * (((gNorm - bNorm) / delta) % 6);
  } else if (max === gNorm) {
    h = 60 * (((bNorm - rNorm) / delta) + 2);
  } else if (max === bNorm) {
    h = 60 * (((rNorm - gNorm) / delta) + 4);
  }

  h = (h + 360) % 360;

  const s = (max === 0 ? 0 : delta / max) * 100;

  return { hue: h, saturation: s };
};

export const hsvToHs = (h: number, s: number, v: number): { hue: number, saturation: number; } => {
  return {
    hue: h,
    saturation: s * (v / 100)
  };
};

export const hsToHSV = (h: number, s: number): { h: number, s: number; v: number; } => {
  return { h, s, v: 100 };
};

const mapTempToHS = new Map([
  [100, [19, 222.1]],
  [101, [18, 222]],
  [102, [18, 222]],
  [103, [18, 222]],
  [104, [17, 222]],
  [105, [17, 222]],
  [106, [17, 222]],
  [107, [17, 222]],
  [108, [16, 222]],
  [109, [16, 223]],
  [110, [16, 223]],
  [111, [15, 223]],
  [112, [15, 223]],
  [113, [15, 223]],
  [114, [14, 223]],
  [115, [14, 223]],
  [116, [14, 224]],
  [117, [14, 224]],
  [118, [13, 224]],
  [119, [13, 224]],
  [120, [13, 224]],
  [121, [12, 225]],
  [122, [12, 225]],
  [123, [12, 225]],
  [124, [11, 225]],
  [125, [11, 226]],
  [126, [11, 226]],
  [127, [10, 227]],
  [128, [10, 227]],
  [129, [9, 228]],
  [130, [9, 228]],
  [131, [9, 229]],
  [132, [8, 229]],
  [133, [8, 230]],
  [134, [8, 230]],
  [135, [7, 231]],
  [136, [7, 232]],
  [137, [7, 233]],
  [138, [6, 234]],
  [139, [6, 235]],
  [140, [6, 237]],
  [141, [5, 238]],
  [142, [5, 240]],
  [143, [5, 242]],
  [144, [4, 244]],
  [145, [4, 246]],
  [146, [4, 249]],
  [147, [4, 251]],
  [148, [4, 254]],
  [149, [3, 258]],
  [150, [3, 261]],
  [151, [3, 265]],
  [152, [3, 271]],
  [153, [3, 276]],
  [154, [2, 283]],
  [155, [2, 290]],
  [156, [2, 295]],
  [157, [2, 300]],
  [158, [1, 300]],
  [159, [1, 300]],
  [160, [1, 195]],
  [161, [1, 84]],
  [162, [1, 58]],
  [163, [1, 55]],
  [164, [1, 53]],
  [165, [1, 50]],
  [166, [2, 47]],
  [167, [2, 44]],
  [168, [2, 42]],
  [169, [2, 40]],
  [170, [3, 39]],
  [171, [3, 38]],
  [172, [3, 37]],
  [173, [3, 36]],
  [174, [4, 35]],
  [175, [4, 35]],
  [176, [4, 34]],
  [177, [4, 34]],
  [178, [5, 33]],
  [179, [5, 33]],
  [180, [5, 32]],
  [181, [5, 32]],
  [182, [6, 32]],
  [183, [6, 31]],
  [184, [6, 31]],
  [185, [6, 31]],
  [186, [7, 30]],
  [187, [7, 30]],
  [188, [7, 30]],
  [189, [7, 30]],
  [190, [7, 30]],
  [191, [8, 29]],
  [192, [8, 29]],
  [193, [8, 29]],
  [194, [8, 29]],
  [195, [9, 29]],
  [196, [9, 29]],
  [197, [9, 29]],
  [198, [9, 29]],
  [199, [10, 28]],
  [200, [10, 28]],
  [201, [10, 28]],
  [202, [10, 28]],
  [203, [11, 28]],
  [204, [11, 28]],
  [205, [11, 28]],
  [206, [11, 28]],
  [207, [11, 28]],
  [208, [12, 28]],
  [209, [12, 28]],
  [210, [12, 28]],
  [211, [12, 28]],
  [212, [12, 27]],
  [213, [13, 27]],
  [214, [13, 27]],
  [215, [13, 27]],
  [216, [13, 27]],
  [217, [14, 27]],
  [218, [14, 27]],
  [219, [14, 27]],
  [220, [14, 27]],
  [221, [14, 27]],
  [222, [15, 27]],
  [223, [15, 27]],
  [224, [15, 27]],
  [225, [15, 27]],
  [226, [16, 27]],
  [227, [16, 27]],
  [228, [16, 27]],
  [229, [16, 27]],
  [230, [16, 27]],
  [231, [17, 27]],
  [232, [17, 27]],
  [233, [17, 27]],
  [234, [17, 27]],
  [235, [17, 27]],
  [236, [18, 27]],
  [237, [18, 27]],
  [238, [18, 27]],
  [239, [18, 27]],
  [240, [18, 27]],
  [241, [19, 27]],
  [242, [19, 27]],
  [243, [19, 27]],
  [244, [19, 27]],
  [245, [19, 27]],
  [246, [20, 27]],
  [247, [20, 26]],
  [248, [20, 26]],
  [249, [20, 26]],
  [250, [20, 26]],
  [251, [21, 26]],
  [252, [21, 26]],
  [253, [21, 26]],
  [254, [21, 26]],
  [255, [21, 26]],
  [256, [22, 26]],
  [257, [22, 26]],
  [258, [22, 26]],
  [259, [22, 26]],
  [260, [22, 26]],
  [261, [23, 26]],
  [262, [23, 26]],
  [263, [23, 26]],
  [264, [23, 26]],
  [265, [23, 26]],
  [266, [24, 26]],
  [267, [24, 26]],
  [268, [24, 26]],
  [269, [24, 26]],
  [270, [24, 26]],
  [271, [24, 26]],
  [272, [25, 26]],
  [273, [25, 26]],
  [274, [25, 26]],
  [275, [25, 26]],
  [276, [25, 26]],
  [277, [26, 26]],
  [278, [26, 26]],
  [279, [26, 26]],
  [280, [26, 26]],
  [281, [26, 26]],
  [282, [26, 26]],
  [283, [27, 26]],
  [284, [27, 26]],
  [285, [27, 26]],
  [286, [27, 26]],
  [287, [27, 26]],
  [288, [28, 26]],
  [289, [28, 26]],
  [290, [28, 26]],
  [291, [28, 26]],
  [292, [28, 26]],
  [293, [28, 26]],
  [294, [29, 26]],
  [295, [29, 26]],
  [296, [29, 26]],
  [297, [29, 26]],
  [298, [29, 26]],
  [299, [30, 26]],
  [300, [30, 26]],
  [301, [30, 26]],
  [302, [30, 26]],
  [303, [30, 26]],
  [304, [30, 26]],
  [305, [31, 26]],
  [306, [31, 26]],
  [307, [31, 26]],
  [308, [31, 26]],
  [309, [31, 26]],
  [310, [31, 26]],
  [311, [32, 26]],
  [312, [32, 26]],
  [313, [32, 26]],
  [314, [32, 26]],
  [315, [32, 26]],
  [316, [33, 26]],
  [317, [33, 26]],
  [318, [33, 26]],
  [319, [33, 26]],
  [320, [33, 26]],
  [321, [33, 26]],
  [322, [34, 26]],
  [323, [34, 26]],
  [324, [34, 26]],
  [325, [34, 26]],
  [326, [34, 26]],
  [327, [34, 26]],
  [328, [35, 26]],
  [329, [35, 26]],
  [330, [35, 26]],
  [331, [35, 26]],
  [332, [35, 26]],
  [333, [35, 26]],
  [334, [36, 26]],
  [335, [36, 26]],
  [336, [36, 26]],
  [337, [36, 26]],
  [338, [36, 26]],
  [339, [37, 26]],
  [340, [37, 26]],
  [341, [37, 26]],
  [342, [37, 26]],
  [343, [37, 26]],
  [344, [37, 26]],
  [345, [38, 26]],
  [346, [38, 26]],
  [347, [38, 26]],
  [348, [38, 26]],
  [349, [38, 26]],
  [350, [39, 26]],
  [351, [39, 26]],
  [352, [39, 27]],
  [353, [39, 27]],
  [354, [39, 27]],
  [355, [39, 27]],
  [356, [40, 27]],
  [357, [40, 27]],
  [358, [40, 27]],
  [359, [40, 27]],
  [360, [40, 27]],
  [361, [40, 27]],
  [362, [41, 27]],
  [363, [41, 27]],
  [364, [41, 27]],
  [365, [41, 27]],
  [366, [41, 27]],
  [367, [42, 27]],
  [368, [42, 27]],
  [369, [42, 27]],
  [370, [42, 27]],
  [371, [42, 27]],
  [372, [42, 27]],
  [373, [43, 27]],
  [374, [43, 27]],
  [375, [43, 27]],
  [376, [43, 27]],
  [377, [43, 27]],
  [378, [43, 27]],
  [379, [43, 27]],
  [380, [44, 27]],
  [381, [44, 27]],
  [382, [44, 27]],
  [383, [44, 27]],
  [384, [44, 27]],
  [385, [44, 27]],
  [386, [45, 27]],
  [387, [45, 27]],
  [388, [45, 27]],
  [389, [45, 27]],
  [390, [45, 27]],
  [391, [46, 27]],
  [392, [46, 27]],
  [393, [46, 27]],
  [394, [46, 27]],
  [395, [46, 27]],
  [396, [46, 27]],
  [397, [47, 27]],
  [398, [47, 27]],
  [399, [47, 27]],
  [400, [47, 27]],
  [401, [47, 27]],
  [402, [47, 27]],
  [403, [48, 27]],
  [404, [48, 27]],
  [405, [48, 27]],
  [406, [48, 27]],
  [407, [48, 27]],
  [408, [49, 27]],
  [409, [49, 27]],
  [410, [49, 27]],
  [411, [49, 27]],
  [412, [49, 27]],
  [413, [49, 27]],
  [414, [50, 27]],
  [415, [50, 27]],
  [416, [50, 27]],
  [417, [50, 27]],
  [418, [50, 27]],
  [419, [50, 27]],
  [420, [51, 27]],
  [421, [51, 27]],
  [422, [51, 27]],
  [423, [51, 27]],
  [424, [51, 27]],
  [425, [51, 27]],
  [426, [52, 27]],
  [427, [51, 27]],
  [428, [52, 27]],
  [429, [52, 27]],
  [430, [52, 27]],
  [431, [52, 27]],
  [432, [53, 27]],
  [433, [53, 27]],
  [434, [53, 27]],
  [435, [53, 27]],
  [436, [53, 27]],
  [437, [53, 27]],
  [438, [54, 27]],
  [439, [54, 27]],
  [440, [54, 27]],
  [441, [54, 27]],
  [442, [54, 27]],
  [443, [54, 27]],
  [444, [55, 27]],
  [445, [55, 27]],
  [446, [55, 27]],
  [447, [55, 27]],
  [448, [55, 27]],
  [449, [55, 27]],
  [450, [56, 27]],
  [451, [56, 27]],
  [452, [56, 27]],
  [453, [56, 27]],
  [454, [56, 27]],
  [455, [56, 27]],
  [456, [57, 27]],
  [457, [57, 27]],
  [458, [57, 27]],
  [459, [57, 27]],
  [460, [57, 27]],
  [461, [57, 27]],
  [462, [57, 27]],
  [463, [58, 27]],
  [464, [58, 27]],
  [465, [58, 27]],
  [466, [58, 27]],
  [467, [58, 27]],
  [468, [59, 28]],
  [469, [59, 28]],
  [470, [59, 28]],
  [471, [59, 28]],
  [472, [59, 28]],
  [473, [59, 28]],
  [474, [60, 28]],
  [475, [60, 28]],
  [476, [60, 28]],
  [477, [60, 28]],
  [478, [60, 28]],
  [479, [60, 28]],
  [480, [60, 28]],
  [481, [60, 28]],
  [482, [60, 28]],
  [483, [61, 28]],
  [484, [61, 28]],
  [485, [61, 28]],
  [486, [61, 28]],
  [487, [62, 28]],
  [488, [62, 28]],
  [489, [62, 28]],
  [490, [62, 28]],
  [491, [62, 28]],
  [492, [62, 28]],
  [493, [63, 28]],
  [494, [63, 28]],
  [495, [63, 28]],
  [496, [63, 28]],
  [497, [63, 28]],
  [498, [63, 28]],
  [499, [63, 28]],
  [500, [64, 28]],
]);

const mapHsToTemp = new Map(Array.from(mapTempToHS.entries()).map(([temp, hs]) => {
  return [`${hs[0]}:${hs[1]}`, temp];
}));

export const tempToHS = (temp: number) => {
  const [hue, saturation] = mapTempToHS.get(temp) || [0, 0];
  return { hue, saturation };
};

export const hsToTemp = (hue: number, saturation: number) => {
  const temp = mapHsToTemp.get(`${hue}:${saturation}`) || 0;
  return temp;
};
